<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>断舍离的博客</title>
    <link>https://www.awslop.com/</link>
    <description>Recent content on 断舍离的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 22 Dec 2019 13:13:13 +0800</lastBuildDate>
    
	<atom:link href="https://www.awslop.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>浏览222</title>
      <link>https://www.awslop.com/2019/12/21/doh.html</link>
      <pubDate>Sun, 22 Dec 2019 13:13:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2019/12/21/doh.html</guid>
      <description>firefox 1 2 3 4 chrome://flags Secure DNS lookups. 启用该选项 重启浏览器 chrome 1 2 3 4 chrome://flags Secure DNS lookups. 启用该选项 重启浏览器 1 2 3 4 5 6 7 8 9 修改chrome快捷方式的参数 增加以下参数 --enable-features=&amp;#34;dns-over-https&amp;lt;DoHTrial&amp;#34; --force-fieldtrials=&amp;#34;DoHTrial/Group1&amp;#34;</description>
    </item>
    
    <item>
      <title>akka-并发任务</title>
      <link>https://www.awslop.com/2019/12/20/akka-demo-concurrent.html</link>
      <pubDate>Fri, 20 Dec 2019 17:28:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2019/12/20/akka-demo-concurrent.html</guid>
      <description>描述 akka的编程模型 本身是不建议等待返回结果的 通过给 actor加状态给任务计数 + 消息的回传 达到获取结果的目的 该文演示了此操作方式 版本1 该版</description>
    </item>
    
    <item>
      <title>HOCON配置文件读取</title>
      <link>https://www.awslop.com/2019/12/15/hocon-java-read.html</link>
      <pubDate>Sun, 15 Dec 2019 17:28:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2019/12/15/hocon-java-read.html</guid>
      <description>简述 HOCON（Human-Optimized Config Object Notation）是一个易于使用的配置文件格式，具有面向对象风格。 akka的配置文件就是用</description>
    </item>
    
    <item>
      <title>JMH-测试动态执行代码效率</title>
      <link>https://www.awslop.com/2019/11/16/jmh-dynamic-run.html</link>
      <pubDate>Sat, 16 Nov 2019 17:28:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2019/11/16/jmh-dynamic-run.html</guid>
      <description>测试比较几种动态代码的速度 Java原生代码执行 使用janino编译Java代码执行 groovy加载类 以反射创建后，直接调用 groovy加载类</description>
    </item>
    
    <item>
      <title>群晖两步验证的关闭</title>
      <link>https://www.awslop.com/2019/11/12/doh.html</link>
      <pubDate>Tue, 12 Nov 2019 13:13:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2019/11/12/doh.html</guid>
      <description>家里的网络用的是软路由拨号的，软路由装在群晖的虚拟机里 突然断网了 于是登上软路由看看是咋了， 发现访问不了 估计死机了，那就重启下虚拟机好了，访问</description>
    </item>
    
    <item>
      <title>基准测试工具JMH-示例</title>
      <link>https://www.awslop.com/2019/11/10/benchmark-java-jmh.html</link>
      <pubDate>Sun, 10 Nov 2019 17:28:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2019/11/10/benchmark-java-jmh.html</guid>
      <description>基准测试工具JHM junit用来测方法对不对 ab用来压测http服务 jhm是用测java方法性能的， 比如每秒能运行多少次，每次执行的耗时 jh</description>
    </item>
    
    <item>
      <title>使用drools的规则管理平台-02</title>
      <link>https://www.awslop.com/2019/10/28/update-rule-by-scanner.html</link>
      <pubDate>Mon, 28 Oct 2019 17:28:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2019/10/28/update-rule-by-scanner.html</guid>
      <description>&lt;p&gt;上一节演示了 workbench 的搭建，规则编写、规则测试、规则部署
还通过http使用了部署在kie-server中的规则&lt;/p&gt;
&lt;p&gt;下面演示使用java客户端，调用部署在kie-server中的规则。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用drools的规则管理平台-01</title>
      <link>https://www.awslop.com/2019/10/27/update-rule-by-scanner.html</link>
      <pubDate>Sun, 27 Oct 2019 17:28:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2019/10/27/update-rule-by-scanner.html</guid>
      <description>简述 drools的BRMS(业务规则管理系统) 起先叫 guvnor 然后叫 drools-workbench 从7.18版本开始叫 Business Central Workbench Business-Central Workbench == Drools Workbench + jBPM Workbench drools-workbench 用来管理规则 kie-server 则是运行规则的容器服</description>
    </item>
    
    <item>
      <title>自定义动态更新drools规则</title>
      <link>https://www.awslop.com/2019/10/26/update-rule-by-scanner.html</link>
      <pubDate>Sat, 26 Oct 2019 17:28:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2019/10/26/update-rule-by-scanner.html</guid>
      <description>简述 scanner有两个实现 KieRepositoryScannerImpl KieFileSystemScannerImpl 二者区别为 一个是从文件夹检查更新， 一个是从maven仓库检查更新 下面以 KieFileSystemScannerImpl 为例进行演示从文件夹获取更新 然后分析</description>
    </item>
    
    <item>
      <title>下载m3u8-aes128加密视频-02</title>
      <link>https://www.awslop.com/2019/10/13/download-m3u8-video-02.html</link>
      <pubDate>Sun, 13 Oct 2019 22:28:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2019/10/13/download-m3u8-video-02.html</guid>
      <description>实例 流程为 装个抓包工具 浏览器配置代理为抓包工具 在页面上点击播放后，会加载m3u8文件 抓包工具检测到特定信息后，将该m3u8地址发送给spri</description>
    </item>
    
    <item>
      <title>下载m3u8-aes128加密视频-01</title>
      <link>https://www.awslop.com/2019/10/13/download-m3u8-video-01.html</link>
      <pubDate>Sat, 12 Oct 2019 17:28:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2019/10/13/download-m3u8-video-01.html</guid>
      <description>操作演示 如果是没加密的 一条命令就够了 ffmpeg -i http://aa.bb.com/play.m3u8 file.mp4 但被包含的资源一般m3u8的访问需要权限 同时m3u8中的ts也通过aes128加密 密码则也被包含</description>
    </item>
    
    <item>
      <title>scala调用系统命令</title>
      <link>https://www.awslop.com/2019/10/09/scala-process.html</link>
      <pubDate>Wed, 09 Oct 2019 17:28:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2019/10/09/scala-process.html</guid>
      <description>操作演示 启动scala 1 2 docker run --rm -it hseeberger/scala-sbt:11.0.3_1.2.8_2.13.0 bash scala -language:postfixOps 命令里面不能直接用管道或重定向符号 需要用#来拼接 报错解决 scala代码中如果使用 !执行命令时， 会有</description>
    </item>
    
    <item>
      <title>k8s的相关项目</title>
      <link>https://www.awslop.com/2019/10/03/k8s-cluster-setup-03.html</link>
      <pubDate>Thu, 03 Oct 2019 17:28:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2019/10/03/k8s-cluster-setup-03.html</guid>
      <description>其他厂商版本 Canonical 公司为自家的 ubuntu 提供的 适配版 k8s 单机版 MicroK8s 集群版 Charmed Kubernetes rancher公司 https://github.com/rancher/k3s/releases 工具 helm 包管理工具 就好比360软件管家、yum、apt等软件 可</description>
    </item>
    
    <item>
      <title>浏览器启用dns-over-https(DoH)</title>
      <link>https://www.awslop.com/2019/09/12/doh.html</link>
      <pubDate>Thu, 12 Sep 2019 13:13:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2019/09/12/doh.html</guid>
      <description>firefox 1 2 3 4 chrome://flags Secure DNS lookups. 启用该选项 重启浏览器 chrome 1 2 3 4 chrome://flags Secure DNS lookups. 启用该选项 重启浏览器 1 2 3 4 5 6 7 8 9 修改chrome快捷方式的参数 增加以下参数 --enable-features=&amp;#34;dns-over-https&amp;lt;DoHTrial&amp;#34; --force-fieldtrials=&amp;#34;DoHTrial/Group1&amp;#34;</description>
    </item>
    
    <item>
      <title>kotlin空指针校验</title>
      <link>https://www.awslop.com/2019/09/11/kotlin-null-check.html</link>
      <pubDate>Wed, 11 Sep 2019 17:28:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2019/09/11/kotlin-null-check.html</guid>
      <description>kotlin空指针校验 类型的说明 变量声明方式 val a: String=&amp;quot;tom&amp;quot; 通常会写成val a = &amp;quot;tom&amp;quot; 但还有另一种 val a: String?=&amp;quot;tom&amp;quot; 表示非空类型 1 2 3 4 5 6 fun test1() { val a1 = 2; // val a2 = ss as</description>
    </item>
    
    <item>
      <title>使用hashids创建短链服务</title>
      <link>https://www.awslop.com/2019/09/03/hashids-usage.html</link>
      <pubDate>Tue, 03 Sep 2019 17:28:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2019/09/03/hashids-usage.html</guid>
      <description>&lt;p&gt;简单的方案是使用uuid生成， 但太长且数据库检索效率低。&lt;br&gt;
本次使用hashIds的方案 简单 安全。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>给文章加水印-零宽字符</title>
      <link>https://www.awslop.com/2019/09/07/zero-width.html</link>
      <pubDate>Tue, 03 Sep 2019 17:28:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2019/09/07/zero-width.html</guid>
      <description>简述 一般的防盗图手段 给图片加水印 高级点则是隐形水印 阿里查到泄露内网截图的员工 美团和大众点评的盗图官司 最近了解到针对文本的水印技术：零宽字符 示</description>
    </item>
    
    <item>
      <title>激活码的生成</title>
      <link>https://www.awslop.com/2019/08/16/hashids-usage.html</link>
      <pubDate>Fri, 16 Aug 2019 17:28:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2019/08/16/hashids-usage.html</guid>
      <description>&lt;p&gt;简单的方案是使用uuid生成， 但太长且数据库检索效率低。&lt;br&gt;
本次使用hashIds的方案 简单 安全。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>文件分割与合并</title>
      <link>https://www.awslop.com/2019/08/07/split-merge-file.html</link>
      <pubDate>Wed, 07 Aug 2019 17:28:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2019/08/07/split-merge-file.html</guid>
      <description>简介 linux下的命令 dd、split 用于分割文件 cat命令用于合并文件 windows下使用 copy合并文件 linux下dd、split演示</description>
    </item>
    
    <item>
      <title>mysql物理备份与还原示例</title>
      <link>https://www.awslop.com/2019/08/02/k8s-cluster-setup-02.html</link>
      <pubDate>Fri, 02 Aug 2019 17:28:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2019/08/02/k8s-cluster-setup-02.html</guid>
      <description>主要流程 1. 先建库建表 插入测试数据 2. 以物理方式备份数据 --数据备份完毕 3. 创建新的mysql-server 然后建库建表 移除表空间 4.停止mysq</description>
    </item>
    
    <item>
      <title>Github 最简单的认证方式 - Access Token[转]</title>
      <link>https://www.awslop.com/2019/07/06/check-credit.html</link>
      <pubDate>Sat, 06 Jul 2019 16:13:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2019/07/06/check-credit.html</guid>
      <description>Github 最简单的认证方式 - Access Token[转] Github 本身提供了多种认证方式，所有开发人员可以各取所需。 SSH，这是最原始的方式，如果使用git bash只</description>
    </item>
    
    <item>
      <title>github搜开源项目技巧</title>
      <link>https://www.awslop.com/2019/07/06/check-credit.html</link>
      <pubDate>Sat, 06 Jul 2019 16:13:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2019/07/06/check-credit.html</guid>
      <description>主要使用高级搜索来实现精准搜索开源项目 一个仓库主要以下几部分 项目名称，项目描述 项目主要是什么语言的 根目录下的README.md 描述一些详情 常</description>
    </item>
    
    <item>
      <title>k8s-外部访问ingress</title>
      <link>https://www.awslop.com/2019/06/27/k8s-ingress-controller.html</link>
      <pubDate>Thu, 27 Jun 2019 17:28:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2019/06/27/k8s-ingress-controller.html</guid>
      <description>对外暴露服务 通常使用ingress作为前置入口 那如何配置 ingress-controller 与外界通信？ LoadBalancer 如果有云厂商的LoadBalancer， 那自然方便 各云厂商的实现可能</description>
    </item>
    
    <item>
      <title>gradle-task使用</title>
      <link>https://www.awslop.com/2019/06/21/gradle-task-learn.html</link>
      <pubDate>Fri, 21 Jun 2019 16:13:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2019/06/21/gradle-task-learn.html</guid>
      <description>gradle-task的使用 新建一个gradle-Java项目 工程创建 默认的 build.gradle 文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 plugins { id &amp;#39;java&amp;#39; } group &amp;#39;fluffy.mo&amp;#39; version &amp;#39;1.0-SNAPSHOT&amp;#39; sourceCompatibility = 1.8 repositories</description>
    </item>
    
    <item>
      <title>使用jstack分析线程-示例</title>
      <link>https://www.awslop.com/2019/02/10/jstack-demo.html</link>
      <pubDate>Mon, 10 Jun 2019 17:28:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2019/02/10/jstack-demo.html</guid>
      <description>1. 使用jstack分析线程-示例 通过两个demo来学习如何使用jstack 1.1. 死锁 1.1.1. 死锁示例代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23</description>
    </item>
    
    <item>
      <title>查查查-各类信用查询</title>
      <link>https://www.awslop.com/2019/06/05/check-credit.html</link>
      <pubDate>Wed, 05 Jun 2019 16:13:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2019/06/05/check-credit.html</guid>
      <description>中国执行信息公开网 可以查到一个人的失信记录 http://zxgk.court.gov.cn 全国标准信息公共服务平台 每个行业接触到的各种标准，包括行业标准、团体标准、国外标准，已废止的、现</description>
    </item>
    
    <item>
      <title>docker的复制文件操作</title>
      <link>https://www.awslop.com/2019/09/09/docker-cp.html</link>
      <pubDate>Sun, 02 Jun 2019 17:28:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2019/09/09/docker-cp.html</guid>
      <description>&lt;p&gt;容器与宿主机之间的文件复制示例&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>休闲娱乐</title>
      <link>https://www.awslop.com/2019/06/05/relax.html</link>
      <pubDate>Thu, 30 May 2019 13:13:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2019/06/05/relax.html</guid>
      <description>小河淌水-颅内高潮 1 2 3 4 5 6 7 8 9 10 https://weibo.com/tv/v/Hl5d8en8D?fid=1034:4350248915771690 https://dig.chouti.com/link/25184166 小河淌水-龚琳娜-歌手第三季-第10期：第76分钟开始 https://www.mgtv.com/b/327378/5314401.html https://www.mgtv.com/b/327378/5314351.html https://y.qq.com/n/yqq/song/002ogMAd2lR6sT.html 小河淌水-龚琳娜-全能星战-第二期第8</description>
    </item>
    
    <item>
      <title>各类openjdk下载地址</title>
      <link>https://www.awslop.com/2019/05/25/download-openjdk.html</link>
      <pubDate>Sat, 25 May 2019 17:28:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2019/05/25/download-openjdk.html</guid>
      <description>openjdk oracle原版 jdk 之前在可通过命令从官网下载，现在行不通了，必须用oracle账号登录才能下载。 https://www.oracle.com/technetwork/java/javase/downloads/jdk11-downloads-5066655.html oracle的共享账号 http://bugmenot.com/view/oracle.com adobe网站下</description>
    </item>
    
    <item>
      <title>DinD模式下通过容器构建镜像-方案</title>
      <link>https://www.awslop.com/2019/05/18/dind-build-image-with-cache.html</link>
      <pubDate>Sat, 18 May 2019 17:28:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2019/05/18/dind-build-image-with-cache.html</guid>
      <description>&lt;p&gt;持续集成时，构建镜像后，通常会产生一些临时镜像&lt;br&gt;
很不docker，一点也不绿色&lt;br&gt;
使用DinD的方案可以解决该问题&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>自动装箱拆箱在scala中的表现</title>
      <link>https://www.awslop.com/2019/05/17/thinking-autoboxing-implicit.html</link>
      <pubDate>Fri, 17 May 2019 17:28:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2019/05/17/thinking-autoboxing-implicit.html</guid>
      <description>&lt;p&gt;自动装箱拆箱是java中的概念&lt;br&gt;
implicit是scala中的概念&lt;br&gt;
都有变量包装的特性&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>spring data elasticsearch日期类型冲突</title>
      <link>https://www.awslop.com/2019/05/10/spring-data-elasticsearch-error-date.html</link>
      <pubDate>Fri, 10 May 2019 17:28:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2019/05/10/spring-data-elasticsearch-error-date.html</guid>
      <description>IllegalArgumentException 环境 spring-data-elasticsearch 3.1.6 java.lang.IllegalArgumentException: Mapper for [publishDate] conflicts with existing mapping in other types: [mapper [publishDate] has different [format] values 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 org.springframework.beans.factory.BeanCreationException: Error creating bean with name &amp;#39;app_Main&amp;#39;: Injection of autowired dependencies failed; nested exception is java.lang.IllegalArgumentException: Mapper for [publishDate] conflicts with existing mapping in other types: [mapper [publishDate] has</description>
    </item>
    
    <item>
      <title>使用spring security实现手机验证码登录</title>
      <link>https://www.awslop.com/2019/04/09/spring-security-login-by-mobile-code.html</link>
      <pubDate>Tue, 09 Apr 2019 17:28:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2019/04/09/spring-security-login-by-mobile-code.html</guid>
      <description>目标 使用spring security添加两种登录方式 手机号，验证码登录 用户名 密码 图形验证码登录 运行环境 win10-x64 jdk-v1.8 springboot-v2.1.4 springsecurity-5.1.5 环境搭建 新建maven项目 配置</description>
    </item>
    
    <item>
      <title>登录流程的本质</title>
      <link>https://www.awslop.com/2019/04/08/login-nature.html</link>
      <pubDate>Mon, 08 Apr 2019 17:28:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2019/04/08/login-nature.html</guid>
      <description>登录的本质 在登录页面 输入用户名与密码 后台核对无误后，将用户信息放入会话中 在访问需要登录的页面时，系统在会话中查找用户信息 找到了，就放行 没找到</description>
    </item>
    
    <item>
      <title>通过zipkin对dubbo进行链路追踪</title>
      <link>https://www.awslop.com/2019/04/06/zipkin-dubbo-tracing.html</link>
      <pubDate>Sat, 06 Apr 2019 17:28:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2019/04/06/zipkin-dubbo-tracing.html</guid>
      <description>&lt;p&gt;通过zipkin实现dubbo下的链路追踪&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>dev-redis客户端-RedisDesktopManager</title>
      <link>https://www.awslop.com/2019/03/28/download-redisdesktopmanager.html</link>
      <pubDate>Thu, 28 Mar 2019 13:13:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2019/03/28/download-redisdesktopmanager.html</guid>
      <description>下载 RedisDesktopManager 收费了 不提供下载地址 但提供了源码 可以自己编译 有网友提供了编译好的版本， 1 2 3 4 5 6 7 8 9 官方源码 https://github.com/uglide/RedisDesktopManager 编译好的版本 https://github.com/lework/RedisDesktopManager-Windows/releases 编译教程 https://github.com/lloy1231/RedisDesktopManager-Windows http://docs.redisdesktop.com/en/latest/install/#build-from-source 由node</description>
    </item>
    
    <item>
      <title>linux内存文件系统使用</title>
      <link>https://www.awslop.com/2019/03/17/linux-ram-filesystem.html</link>
      <pubDate>Sun, 17 Mar 2019 17:28:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2019/03/17/linux-ram-filesystem.html</guid>
      <description>使用内存文件系统 就是图它特别快 操作演示 3种创建内存文件系统的方式 tmpfs 使用操作比较友好 ramfs 比较快，但危险 格式化内存 步骤稍微繁琐 创建几个文件夹用来演</description>
    </item>
    
    <item>
      <title>redis-lua-秒杀</title>
      <link>https://www.awslop.com/2019/03/16/redis-lua-buy.html</link>
      <pubDate>Sat, 16 Mar 2019 17:28:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2019/03/16/redis-lua-buy.html</guid>
      <description>简介 做秒杀的商品数量一般计较少 该方案使用set存储 一定库存 每个用户抢购时，从redis申请序号， 取到了则创建订单。 可与前端缓存方案 限流 熔断一</description>
    </item>
    
    <item>
      <title>spring-session实现分布式会话</title>
      <link>https://www.awslop.com/2019/03/02/spring-session-in-action.html</link>
      <pubDate>Sat, 02 Mar 2019 17:28:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2019/03/02/spring-session-in-action.html</guid>
      <description>&lt;p&gt;通过spring session实现分布式会话&lt;br&gt;
集群下不会丢失会话 集中管理session&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>cloudflare设置ddns</title>
      <link>https://www.awslop.com/2019/08/22/cloudflare-ddns.html</link>
      <pubDate>Fri, 22 Feb 2019 13:13:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2019/08/22/cloudflare-ddns.html</guid>
      <description>主要流程 最终目的是 让 movie.aaabbb.com 能解析成家中的公网ip 最终的api为 1 2 3 4 5 curl -X PUT &amp;#34;https://api.cloudflare.com/client/v4/zones/$tzone_id/dns_records/$trecord_id&amp;#34; \ -H &amp;#34;X-Auth-Email: $auth_email&amp;#34; \ -H &amp;#34;X-Auth-Key: $auth_key&amp;#34; \ -H &amp;#34;Content-Type: application/json&amp;#34; \ --data &amp;#39;{&amp;#34;type&amp;#34;:&amp;#34;A&amp;#34;,&amp;#34;name&amp;#34;:&amp;#34;file.awslop.com&amp;#34;,&amp;#34;content&amp;#34;:&amp;#34;$tip&amp;#34;,&amp;#34;ttl&amp;#34;:{},&amp;#34;proxied&amp;#34;:false}&amp;#39; ; 以上命令中需要的参数有 tzone</description>
    </item>
    
    <item>
      <title>通过rocketmq实现分布式事务</title>
      <link>https://www.awslop.com/2019/02/16/rocketmq-transaction.html</link>
      <pubDate>Sat, 16 Feb 2019 17:28:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2019/02/16/rocketmq-transaction.html</guid>
      <description>1. 通过rocketmq实现分布式事务 1.1. 实现原理 1.1.1. 通常说的分布式事务 一次请求-调用serviceA serviceA 中会调用serviceB，serviceC</description>
    </item>
    
    <item>
      <title>drone持续集成-发布github pages</title>
      <link>https://www.awslop.com/2019/02/03/drone-ci-github-pages.html</link>
      <pubDate>Sun, 03 Feb 2019 17:28:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2019/02/03/drone-ci-github-pages.html</guid>
      <description>&lt;p&gt;docker持续集成-drone发布静态博客&lt;br&gt;
将hugo产生的静态页面推送到github&lt;br&gt;
并通知到钉钉群&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>跨宿主机与docker容器通信</title>
      <link>https://www.awslop.com/2019/01/01/connect-container-ip.html</link>
      <pubDate>Fri, 01 Feb 2019 17:28:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2019/01/01/connect-container-ip.html</guid>
      <description>&lt;p&gt;有一些应用只需要1个端口就能访问&lt;br&gt;
比如 nginx&lt;/p&gt;
&lt;p&gt;而有一些应用的搭建都是由多个节点搭建的&lt;br&gt;
比如hadoop 当访问hdfs的时候 访问的不仅仅用port还会用ip&lt;br&gt;
这时后端口映射就不那么好使了&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>gradle-全局init</title>
      <link>https://www.awslop.com/2019/01/16/gradle-init-learn.html</link>
      <pubDate>Wed, 16 Jan 2019 16:13:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2019/01/16/gradle-init-learn.html</guid>
      <description>官方文档 https://docs.gradle.org/5.1.1/userguide/init_scripts.html 全局脚本位置 通过参数指定脚本 &amp;ndash;init-script 或 -I （大写的i） 如 gradle -I init.gradle package 存放在 USER_HOME/.gradle/ 目录下 文件名为 init.gradle 或者 init.gradle.kts 的脚本 存放在 USER_HOME/.gradle/init.d/ 或 GRADLE_HOME/init.d/ 目录下 文件名以 .gradle 或 .init.gradle.kts 结尾的</description>
    </item>
    
    <item>
      <title>docker常用操作</title>
      <link>https://www.awslop.com/2019/01/15/docker-useful-cmd.html</link>
      <pubDate>Tue, 15 Jan 2019 17:28:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2019/01/15/docker-useful-cmd.html</guid>
      <description>docker常用操作 Dockerfile编写 编写一般不会一次就完成，常常会出错 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 Sending build context to Docker daemon 5.902MB Step 1/10 : FROM docker:git as builder</description>
    </item>
    
    <item>
      <title>压缩包解压时不使用临时目录</title>
      <link>https://www.awslop.com/2018/01/06/unzip-no-copy.html</link>
      <pubDate>Sun, 06 Jan 2019 13:13:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2018/01/06/unzip-no-copy.html</guid>
      <description>平时主要用 firefox 和 chrome 举例描述 比如下载了一个压缩包 apache-tomcat-7.0.96-windows-x86.zip 文件放在C盘的download文件夹下 通常的操作是 双击打开压缩包 文件浏览器打开希望解压的位置 比</description>
    </item>
    
    <item>
      <title>k8s搭建集群3-异常解决</title>
      <link>https://www.awslop.com/2019/01/03/k8s-cluster-setup-03.html</link>
      <pubDate>Thu, 03 Jan 2019 17:28:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2019/01/03/k8s-cluster-setup-03.html</guid>
      <description>出错恢复 没遇到报错可以跳过 安装过程中可能有一些异常 查看所有的pod分布情况 1 kubectl get pods -n kube-system -o wide -l k8s-app=kubernetes-dashboard 查看失败的镜像 1 2 imageName=`kubectl describe -n kube-system pod -l k8s-app=kubernetes-dashboard | grep Image: | awk &amp;#39;{print $2</description>
    </item>
    
    <item>
      <title>k8s集群搭建-02</title>
      <link>https://www.awslop.com/2019/01/02/k8s-cluster-setup-02.html</link>
      <pubDate>Wed, 02 Jan 2019 17:28:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2019/01/02/k8s-cluster-setup-02.html</guid>
      <description>&lt;p&gt;k8s集群好了 再添加一些相关的组件&lt;br&gt;
dashboard helm helm的webui&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>k8s集群搭建-01</title>
      <link>https://www.awslop.com/2019/01/01/k8s-cluster-setup-01.html</link>
      <pubDate>Tue, 01 Jan 2019 17:28:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2019/01/01/k8s-cluster-setup-01.html</guid>
      <description>1. 目标 通过虚拟机搭建一个kubernetes集群 共3个节点基于ubuntu 2. 组件安装规划 宿主机: win10 vmware-v15 ubuntu=v16.04.1 docker=v18.06 k8s=v1.12.6 3个虚拟机节点=master,no</description>
    </item>
    
    <item>
      <title>ipv4下的回环地址在ipv6下的表示</title>
      <link>https://www.awslop.com/2018/10/16/ipv6-ip.html</link>
      <pubDate>Tue, 16 Oct 2018 13:13:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2018/10/16/ipv6-ip.html</guid>
      <description>回环地址 1 2 3 ipv4 127.0.0.1 ipv6 0:0:0:0:0:0:0:1 ipv6下简写 ::1 所有地址 1 2 3 ipv4 0.0.0.0 ipv6 0:0:0:0:0:0:0:0 ipv6下简写 ::</description>
    </item>
    
    <item>
      <title>scala并发编程-scala的future与java的互相转换</title>
      <link>https://www.awslop.com/2018/10/15/future-convert-to-scala.html</link>
      <pubDate>Mon, 15 Oct 2018 17:28:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2018/10/15/future-convert-to-scala.html</guid>
      <description>操作演示 简单上手 转换需要额外的包 1 2 3 4 5 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.scala-lang.modules&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;scala-java8-compat_2.12&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;0.8.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 主要是 FutureConverters 的 .toScala() .toJava() 两个方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 import java.time.{Duration =&amp;gt; jduration}</description>
    </item>
    
    <item>
      <title>scala并发编程-async</title>
      <link>https://www.awslop.com/2018/09/21/scala-concurrent-async.html</link>
      <pubDate>Fri, 21 Sep 2018 17:28:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2018/09/21/scala-concurrent-async.html</guid>
      <description>描述 async是另一个jar包里的， 用来更简洁的处理 多个future之间的任务衔接 原理是以宏的方式编译代码 可以说是个二道贩子 相似的东西: ja</description>
    </item>
    
    <item>
      <title>scala并发编程-blocking</title>
      <link>https://www.awslop.com/2018/08/22/scala-concurrent-blocking.html</link>
      <pubDate>Wed, 22 Aug 2018 17:28:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2018/08/22/scala-concurrent-blocking.html</guid>
      <description>blocking描述 blocking 中的代码块 与future不在同一线程中，是阻塞等待。 但是阻塞的方式调用在遇上线程池的线程不足时， 会创建新的线程 测试效果</description>
    </item>
    
    <item>
      <title>scala并发编程-promise</title>
      <link>https://www.awslop.com/2018/08/18/scala-concurrent-promise.html</link>
      <pubDate>Sat, 18 Aug 2018 17:28:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2018/08/18/scala-concurrent-promise.html</guid>
      <description>操作演示 生产者消费者模型 一个Promise 只有一个future Promise只能给future确认一次结果 简单上手 1 2 3 4 5 6 7 8 9 10 11 12 13</description>
    </item>
    
    <item>
      <title>scala并发编程-Duration</title>
      <link>https://www.awslop.com/2018/08/13/scala-concurrent-use-duration.html</link>
      <pubDate>Mon, 13 Aug 2018 17:28:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2018/08/13/scala-concurrent-use-duration.html</guid>
      <description>操作步骤 Duration的几种创建方式 可以进行 加减乘除 的操作 java版Duration 与 Scala版Duration 互相转换 简单上手 1 2 3 4</description>
    </item>
    
    <item>
      <title>scala并发编程-future的map和flatmap</title>
      <link>https://www.awslop.com/2018/08/12/scala-concurrent-map.html</link>
      <pubDate>Sun, 12 Aug 2018 17:28:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2018/08/12/scala-concurrent-map.html</guid>
      <description>操作演示 推演 在不使用 map flatmap的情况下 多个future 如果相互之间有依赖关系 则通常是嵌套调用 嵌套太多则维护性太差 比如 1 2 3 4 5 6 7 8 9</description>
    </item>
    
    <item>
      <title>scala并发编程-future</title>
      <link>https://www.awslop.com/2018/08/11/scala-concurrent-future.html</link>
      <pubDate>Sat, 11 Aug 2018 17:28:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2018/08/11/scala-concurrent-future.html</guid>
      <description>操作演示 简单上手 scala版Future 和java版是一个意思 将任务放在线程池中去执行 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 import java.time.LocalTime import java.util.concurrent.TimeUnit</description>
    </item>
    
    <item>
      <title>redis使用lua脚本</title>
      <link>https://www.awslop.com/2018/08/11/redis-lua.html</link>
      <pubDate>Sat, 11 Aug 2018 13:13:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2018/08/11/redis-lua.html</guid>
      <description>脚本 1 hello lua 1 2 3 4 5 6 cat &amp;gt; test01.lua &amp;lt;&amp;lt;EOF local msg = &amp;#34;Hello, lua&amp;#34; return msg EOF redis-cli EVAL &amp;#34;$(cat test01.lua)&amp;#34; 0 使用参数 数字2声明keys有2个 后面跟着两个keys参数 之后就是argv参数 1 2 3 4</description>
    </item>
    
    <item>
      <title>JVM的垃圾回收</title>
      <link>https://www.awslop.com/2018/07/14/jvm-memory-gc.html</link>
      <pubDate>Sat, 14 Jul 2018 15:13:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2018/07/14/jvm-memory-gc.html</guid>
      <description>JVM内存结构 JVM是java代码的运行环境， 用来加载 .class和jar文件 , 运行代码。 内存区域 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21</description>
    </item>
    
    <item>
      <title>类加载器加载的类不能创建对象</title>
      <link>https://www.awslop.com/2018/07/08/classloader-modifiers-exception.html</link>
      <pubDate>Sun, 08 Jul 2018 15:13:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2018/07/08/classloader-modifiers-exception.html</guid>
      <description>IllegalAccessException 异常信息 1 2 3 4 5 6 7 Exception in thread &amp;#34;main&amp;#34; java.lang.IllegalAccessException: Class fluffy.mo.MyClassloader can not access a member of class fluffy.mo.Car with modifiers &amp;#34;public&amp;#34; at sun.reflect.Reflection.ensureMemberAccess(Reflection.java:102) at java.lang.reflect.AccessibleObject.slowCheckMemberAccess(AccessibleObject.java:296) at java.lang.reflect.AccessibleObject.checkAccess(AccessibleObject.java:288) at java.lang.reflect.Constructor.newInstance(Constructor.java:413) at fluffy.mo.MyClassloader.test4(MyClassloader.java:91) at fluffy.mo.MyClassloader.main(MyClassloader.java:68) 在使用反射创建对象时，被提示没权限 代码示例 1 2 3 package fluffy.mo; public class</description>
    </item>
    
    <item>
      <title>SPI与contextclassloader</title>
      <link>https://www.awslop.com/2018/06/27/classloader-spi.html</link>
      <pubDate>Wed, 27 Jun 2018 14:13:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2018/06/27/classloader-spi.html</guid>
      <description>目标 通过SPI学习setContextClassLoader，getContextClassLoader的用法 SPI概念 SPI（Servic</description>
    </item>
    
    <item>
      <title>类加载器使用</title>
      <link>https://www.awslop.com/2018/06/21/classloader-start.html</link>
      <pubDate>Thu, 21 Jun 2018 13:13:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2018/06/21/classloader-start.html</guid>
      <description>类加载器 引入 一般开发都不会接触classloader的概念，但程序的运行却是建立在classloader之上的 为什么要有类加载器： java程</description>
    </item>
    
    <item>
      <title>java程序显示名字修改</title>
      <link>https://www.awslop.com/2019/06/11/java-process-name.html</link>
      <pubDate>Mon, 11 Jun 2018 17:28:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2019/06/11/java-process-name.html</guid>
      <description>简述 当系统种运行多个Java程序时， 在系统种都显示为java.exe进程 ，不易区分。 修改进程名 比如原先是 java -jar aa.jar 通过 cp $JAVA_HOME\bin\java $JAVA_HOME\bin\jaaa 然后 jaaa -jar aa.jar 这样在系统</description>
    </item>
    
    <item>
      <title>动态代理-rpc示例-01</title>
      <link>https://www.awslop.com/2018/06/05/proxy-rpc-01.html</link>
      <pubDate>Tue, 05 Jun 2018 13:13:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2018/06/05/proxy-rpc-01.html</guid>
      <description>目标 写个简单的rpc 调用 Rpc大致思路 定义一个接口HelloService 放在iface.jar中 应用P中引用iface.jar 实现接口He</description>
    </item>
    
    <item>
      <title>动态代理-rpc示例-02</title>
      <link>https://www.awslop.com/2018/06/05/proxy-rpc-02.html</link>
      <pubDate>Tue, 05 Jun 2018 13:13:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2018/06/05/proxy-rpc-02.html</guid>
      <description>上个版本的代码看着比较生肉，与平时开发时的写法差别较大。 接下来这版，加入了动态代理后 动态代理-guava版 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17</description>
    </item>
    
    <item>
      <title>动态代理</title>
      <link>https://www.awslop.com/2018/06/02/proxy-start.html</link>
      <pubDate>Sat, 02 Jun 2018 13:13:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2018/06/02/proxy-start.html</guid>
      <description>目标 通过代码示例了解动态代理语法 示例代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 import java.lang.reflect.InvocationHandler; import java.lang.reflect.Method; import java.lang.reflect.Proxy; public class Demo</description>
    </item>
    
    <item>
      <title>反射使用</title>
      <link>https://www.awslop.com/2018/04/02/reflect-start.html</link>
      <pubDate>Mon, 02 Apr 2018 13:13:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2018/04/02/reflect-start.html</guid>
      <description>反射介绍 可以不直接new 对象，或调用方法。 用另一种创建某个对象（字符串的方式），或调用某个对象的方法（字符串的方式）。 反射这种间接调用效率肯</description>
    </item>
    
    <item>
      <title>dev-浏览器</title>
      <link>https://www.awslop.com/2018/03/17/dev-browser.html</link>
      <pubDate>Sat, 17 Mar 2018 13:13:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2018/03/17/dev-browser.html</guid>
      <description>平时主要用 firefox 和 chrome firefox 首选 http://download-origin.cdn.mozilla.net/pub/devedition/releases/ 选则版本-32或64位-语言 比如 http://download-origin.cdn.mozilla.net/pub/devedition/releases/58.0b1/win64/zh-CN/ 下载Firefox Setup 58.0b1.exe后， 修改后缀为zip后解压core文件夹 更</description>
    </item>
    
    <item>
      <title>归档</title>
      <link>https://www.awslop.com/archives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.awslop.com/archives/</guid>
      <description></description>
    </item>
    
    <item>
      <title>归档</title>
      <link>https://www.awslop.com/categories/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.awslop.com/categories/</guid>
      <description>404</description>
    </item>
    
  </channel>
</rss>