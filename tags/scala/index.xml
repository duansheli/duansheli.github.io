<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>scala on 断舍离的博客</title>
    <link>https://duansheli.github.io/tags/scala/</link>
    <description>Recent content in scala on 断舍离的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 13 Oct 2019 22:28:13 +0800</lastBuildDate>
    
	<atom:link href="https://duansheli.github.io/tags/scala/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>下载m3u8加密视频-02</title>
      <link>https://duansheli.github.io/2019/10/13/download-m3u8-video-02.html</link>
      <pubDate>Sun, 13 Oct 2019 22:28:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2019/10/13/download-m3u8-video-02.html</guid>
      <description>实例 流程为
1. 装个抓包工具 1. 浏览器配置代理为抓包工具
1. 在页面上点击播放后，会加载m3u8文件
1. 抓包工具检测到特定信息后，将该m3u8地址发送给spring boot应用
1. springboot根据收到的m3u8信息 下载视频 解密成mp4
抓包工具-mitmproxy mitmproxy 使用docker安装 docker主机ip 192.</description>
    </item>
    
    <item>
      <title>自动装箱拆箱在scala中的表现</title>
      <link>https://duansheli.github.io/2019/05/17/thinking-autoboxing-implicit.html</link>
      <pubDate>Fri, 17 May 2019 17:28:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2019/05/17/thinking-autoboxing-implicit.html</guid>
      <description>&lt;p&gt;自动装箱拆箱是java中的概念&lt;br /&gt;
implicit是scala中的概念&lt;br /&gt;
都有变量包装的特性&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>scala并发编程-scala的future与java的互相转换</title>
      <link>https://duansheli.github.io/2018/10/15/future-convert-to-scala.html</link>
      <pubDate>Mon, 15 Oct 2018 17:28:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2018/10/15/future-convert-to-scala.html</guid>
      <description>操作演示 简单上手 转换需要额外的包
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.scala-lang.modules&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;scala-java8-compat_2.12&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;0.8.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;  import java.time.{Duration =&amp;gt; jduration} val request = HttpRequest.newBuilder.uri(URI.create(&amp;quot;https://www.baidu.com/&amp;quot;)) .timeout(jduration.ofMinutes(2)) .build val java8Future: CompletableFuture[HttpResponse[String]] = HttpClient.</description>
    </item>
    
    <item>
      <title>scala并发编程-async</title>
      <link>https://duansheli.github.io/2018/09/21/scala-concurrent-async.html</link>
      <pubDate>Fri, 21 Sep 2018 17:28:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2018/09/21/scala-concurrent-async.html</guid>
      <description>描述 async是另一个jar包里的， 用来更简洁的处理 多个future之间的任务衔接
原理是以宏的方式编译代码 可以说是个二道贩子
相似的东西: java库的lombok
由于是二次编译，如果需要调试的话，可能会有问题，慎用。
简单上手 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.scala-lang.modules&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;scala-async_2.12&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;0.9.7&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;  示例1 val f1 = async { val ff1 = async { println(11); true } val ff2 = async { println(22); 322 } if (await(ff1)) await(ff2) else 0 }  示例2 def slowCalcFuture: Future[Int] = Future { TimeUnit.</description>
    </item>
    
    <item>
      <title>scala并发编程-blocking</title>
      <link>https://duansheli.github.io/2018/08/22/scala-concurrent-blocking.html</link>
      <pubDate>Wed, 22 Aug 2018 17:28:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2018/08/22/scala-concurrent-blocking.html</guid>
      <description>blocking描述 blocking 中的代码块 与future不在同一线程中，是阻塞等待。 但是阻塞的方式调用在遇上线程池的线程不足时， 会创建新的线程
测试效果 package com.fluffy.test_concurrent import java.util.concurrent.{CountDownLatch, TimeUnit} object Demo_blocking extends App { import scala.concurrent.{Future, blocking} import scala.</description>
    </item>
    
    <item>
      <title>scala并发编程-promise</title>
      <link>https://duansheli.github.io/2018/08/18/scala-concurrent-promise.html</link>
      <pubDate>Sat, 18 Aug 2018 17:28:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2018/08/18/scala-concurrent-promise.html</guid>
      <description>操作演示 生产者消费者模型
一个Promise 只有一个future
Promise只能给future确认一次结果
简单上手 import scala.concurrent.ExecutionContext.Implicits.global val countDownLatch = new CountDownLatch(1) val p = Promise[Int]() val f1 = p.</description>
    </item>
    
    <item>
      <title>scala并发编程-Duration</title>
      <link>https://duansheli.github.io/2018/08/13/scala-concurrent-Duration.html</link>
      <pubDate>Mon, 13 Aug 2018 17:28:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2018/08/13/scala-concurrent-Duration.html</guid>
      <description>操作步骤 Duration的几种创建方式
可以进行 加减乘除 的操作
java版Duration 与 Scala版Duration 互相转换
简单上手 import scala.concurrent.duration._ import scala.concurrent.ExecutionContext.Implicits.global // FiniteDuration对象的创建 // 截至期限的创建 def main(args_q: Array[String]) { val d1: FiniteDuration = 1.</description>
    </item>
    
    <item>
      <title>scala并发编程-future的map和flatmap</title>
      <link>https://duansheli.github.io/2018/08/12/scala-concurrent-map.html</link>
      <pubDate>Sun, 12 Aug 2018 17:28:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2018/08/12/scala-concurrent-map.html</guid>
      <description>操作演示 推演 在不使用 map flatmap的情况下 多个future 如果相互之间有依赖关系 则通常是嵌套调用 嵌套太多则维护性太差
比如
val f1 = Future { TimeUnit.SECONDS.sleep(1) &amp;quot;f1&amp;quot; } f1 onSuccess { case str =&amp;gt; val f11 = Future { // 启动另一个future // Future{ 。。。 } // 再启动另一个future if (3 &amp;gt; 2) println(str) else throw new Exception(&amp;quot;出错了&amp;quot;) } f11 onSuccess { case _ =&amp;gt; println(s&amp;quot;收到结果 ${str}&amp;quot;) } }  map flatmap 示例 import scala.</description>
    </item>
    
    <item>
      <title>scala并发编程-future</title>
      <link>https://duansheli.github.io/2018/08/11/scala-concurrent-future.html</link>
      <pubDate>Sat, 11 Aug 2018 17:28:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2018/08/11/scala-concurrent-future.html</guid>
      <description>操作演示 简单上手 scala版Future 和java版是一个意思 将任务放在线程池中去执行
import java.time.LocalTime import java.util.concurrent.TimeUnit import scala.concurrent.duration.Duration import scala.concurrent.{Await, Future} import scala.util.{Failure, Success} // @formatter:off object Demo01_future extends App{ import scala.</description>
    </item>
    
  </channel>
</rss>