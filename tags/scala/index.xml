<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>scala on 断舍离的博客</title>
    <link>https://www.awslop.com/tags/scala/</link>
    <description>Recent content in scala on 断舍离的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 20 Dec 2019 17:28:13 +0800</lastBuildDate>
    
	<atom:link href="https://www.awslop.com/tags/scala/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>akka-并发任务</title>
      <link>https://www.awslop.com/2019/12/20/akka-demo-concurrent.html</link>
      <pubDate>Fri, 20 Dec 2019 17:28:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2019/12/20/akka-demo-concurrent.html</guid>
      <description>描述 akka的编程模型 本身是不建议等待返回结果的 通过给 actor加状态给任务计数 + 消息的回传 达到获取结果的目的 该文演示了此操作方式 版本1 该版</description>
    </item>
    
    <item>
      <title>下载m3u8-aes128加密视频-02</title>
      <link>https://www.awslop.com/2019/10/13/download-m3u8-video-02.html</link>
      <pubDate>Sun, 13 Oct 2019 22:28:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2019/10/13/download-m3u8-video-02.html</guid>
      <description>实例 流程为 装个抓包工具 浏览器配置代理为抓包工具 在页面上点击播放后，会加载m3u8文件 抓包工具检测到特定信息后，将该m3u8地址发送给spri</description>
    </item>
    
    <item>
      <title>自动装箱拆箱在scala中的表现</title>
      <link>https://www.awslop.com/2019/05/17/thinking-autoboxing-implicit.html</link>
      <pubDate>Fri, 17 May 2019 17:28:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2019/05/17/thinking-autoboxing-implicit.html</guid>
      <description>&lt;p&gt;自动装箱拆箱是java中的概念&lt;br&gt;
implicit是scala中的概念&lt;br&gt;
都有变量包装的特性&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>scala并发编程-scala的future与java的互相转换</title>
      <link>https://www.awslop.com/2018/10/15/future-convert-to-scala.html</link>
      <pubDate>Mon, 15 Oct 2018 17:28:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2018/10/15/future-convert-to-scala.html</guid>
      <description>操作演示 简单上手 转换需要额外的包 1 2 3 4 5 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.scala-lang.modules&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;scala-java8-compat_2.12&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;0.8.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 主要是 FutureConverters 的 .toScala() .toJava() 两个方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 import java.time.{Duration =&amp;gt; jduration}</description>
    </item>
    
    <item>
      <title>scala并发编程-async</title>
      <link>https://www.awslop.com/2018/09/21/scala-concurrent-async.html</link>
      <pubDate>Fri, 21 Sep 2018 17:28:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2018/09/21/scala-concurrent-async.html</guid>
      <description>描述 async是另一个jar包里的， 用来更简洁的处理 多个future之间的任务衔接 原理是以宏的方式编译代码 可以说是个二道贩子 相似的东西: ja</description>
    </item>
    
    <item>
      <title>scala并发编程-blocking</title>
      <link>https://www.awslop.com/2018/08/22/scala-concurrent-blocking.html</link>
      <pubDate>Wed, 22 Aug 2018 17:28:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2018/08/22/scala-concurrent-blocking.html</guid>
      <description>blocking描述 blocking 中的代码块 与future不在同一线程中，是阻塞等待。 但是阻塞的方式调用在遇上线程池的线程不足时， 会创建新的线程 测试效果</description>
    </item>
    
    <item>
      <title>scala并发编程-promise</title>
      <link>https://www.awslop.com/2018/08/18/scala-concurrent-promise.html</link>
      <pubDate>Sat, 18 Aug 2018 17:28:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2018/08/18/scala-concurrent-promise.html</guid>
      <description>操作演示 生产者消费者模型 一个Promise 只有一个future Promise只能给future确认一次结果 简单上手 1 2 3 4 5 6 7 8 9 10 11 12 13</description>
    </item>
    
    <item>
      <title>scala并发编程-Duration</title>
      <link>https://www.awslop.com/2018/08/13/scala-concurrent-use-duration.html</link>
      <pubDate>Mon, 13 Aug 2018 17:28:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2018/08/13/scala-concurrent-use-duration.html</guid>
      <description>操作步骤 Duration的几种创建方式 可以进行 加减乘除 的操作 java版Duration 与 Scala版Duration 互相转换 简单上手 1 2 3 4</description>
    </item>
    
    <item>
      <title>scala并发编程-future的map和flatmap</title>
      <link>https://www.awslop.com/2018/08/12/scala-concurrent-map.html</link>
      <pubDate>Sun, 12 Aug 2018 17:28:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2018/08/12/scala-concurrent-map.html</guid>
      <description>操作演示 推演 在不使用 map flatmap的情况下 多个future 如果相互之间有依赖关系 则通常是嵌套调用 嵌套太多则维护性太差 比如 1 2 3 4 5 6 7 8 9</description>
    </item>
    
    <item>
      <title>scala并发编程-future</title>
      <link>https://www.awslop.com/2018/08/11/scala-concurrent-future.html</link>
      <pubDate>Sat, 11 Aug 2018 17:28:13 +0800</pubDate>
      
      <guid>https://www.awslop.com/2018/08/11/scala-concurrent-future.html</guid>
      <description>操作演示 简单上手 scala版Future 和java版是一个意思 将任务放在线程池中去执行 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 import java.time.LocalTime import java.util.concurrent.TimeUnit</description>
    </item>
    
  </channel>
</rss>