<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 断舍离的博客</title>
    <link>https://duansheli.github.io/posts/</link>
    <description>Recent content in Posts on 断舍离的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 20 Dec 2019 17:28:13 +0800</lastBuildDate>
    
	<atom:link href="https://duansheli.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>akka-并发任务</title>
      <link>https://duansheli.github.io/2019/12/20/akka-demo-concurrent.html</link>
      <pubDate>Fri, 20 Dec 2019 17:28:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2019/12/20/akka-demo-concurrent.html</guid>
      <description>描述 akka的编程模型 本身是不建议等待返回结果的
通过给 actor加状态给任务计数 + 消息的回传 达到获取结果的目的
该文演示了此操作方式
版本1 该版本是通过异步回调的方式获得结果
消息类 case object StartJob case class DownloadMsg(str: String) case class NodeTaskDone(savePath: String)  执行文件下载的actor package fluffy.</description>
    </item>
    
    <item>
      <title>HOCON配置文件读取</title>
      <link>https://duansheli.github.io/2019/12/15/HOCON-java.html</link>
      <pubDate>Sun, 15 Dec 2019 17:28:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2019/12/15/HOCON-java.html</guid>
      <description>简述 HOCON（Human-Optimized Config Object Notation）是一个易于使用的配置文件格式，具有面向对象风格。
akka的配置文件就是用的conf格式
该篇演示使用方式
解析库 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.typesafe&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;config&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.4.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;  使用演示 样例
akka { loggers = [&amp;quot;akka.</description>
    </item>
    
    <item>
      <title>JMH-测试动态执行代码效率</title>
      <link>https://duansheli.github.io/2019/11/16/jmh-dynamic-run.html</link>
      <pubDate>Sat, 16 Nov 2019 17:28:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2019/11/16/jmh-dynamic-run.html</guid>
      <description>测试比较几种动态代码的速度  Java原生代码执行 使用janino编译Java代码执行 groovy加载类 以反射创建后，直接调用 groovy加载类 以反射创建后，反射调用 使用groovy脚本 执行计算 使用groovy+创建类对象调用 阿里的ql表达式计算  6种代码都计算sum(x,y)
jar补充 groovy 与 阿里的ql 坐标</description>
    </item>
    
    <item>
      <title>群晖两步验证的关闭</title>
      <link>https://duansheli.github.io/2019/11/12/doh.html</link>
      <pubDate>Tue, 12 Nov 2019 13:13:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2019/11/12/doh.html</guid>
      <description>家里的网络用的是软路由拨号的，软路由装在群晖的虚拟机里 突然断网了 于是登上软路由看看是咋了， 发现访问不了 估计死机了，那就重启下虚拟机好了，访问群晖时发现二次验证的软件不在身边 找软件找半天，突然想起来重启群晖主机，虚拟机一样重启
群晖主机的关闭  可以在web管理界面关机，但目前无法登录 可以直接按住开机键等一会就关机了 虽然web界面无法访问，但ssh可以连上 shutdown命令关机  web界面的登录 虽然重启主机解决了网络问题 但登录问题咋整 网上搜了下
官方的解决方案是 用回形针轻按住 RESET 按钮约 4 秒 , 然后重新配置账户 https://www.</description>
    </item>
    
    <item>
      <title>基准测试工具JMH-示例</title>
      <link>https://duansheli.github.io/2019/11/10/benchmark-java-jmh.html</link>
      <pubDate>Sun, 10 Nov 2019 17:28:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2019/11/10/benchmark-java-jmh.html</guid>
      <description>基准测试工具JHM junit用来测方法对不对 ab用来压测http服务
jhm是用测java方法性能的， 比如每秒能运行多少次，每次执行的耗时
jhm是写jdk的那些人整的
所以还是很可靠的
参考 官方介绍
https://openjdk.java.net/projects/code-tools/jmh/
官方示例代码&amp;ndash; 点击左侧zip打包下载
https://hg.openjdk.java.net/code-tools/jmh/file/tip/jmh-samples/src/main/java/org/openjdk/jmh/samples/
工程创建 mvn archetype:generate \ -DinteractiveMode=false \ -DarchetypeGroupId=org.</description>
    </item>
    
    <item>
      <title>使用drools的规则管理平台-02</title>
      <link>https://duansheli.github.io/2019/10/28/update-rule-by-scanner.html</link>
      <pubDate>Mon, 28 Oct 2019 17:28:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2019/10/28/update-rule-by-scanner.html</guid>
      <description>&lt;p&gt;上一节演示了 workbench 的搭建，规则编写、规则测试、规则部署
还通过http使用了部署在kie-server中的规则&lt;/p&gt;

&lt;p&gt;下面演示使用java客户端，调用部署在kie-server中的规则。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用drools的规则管理平台-01</title>
      <link>https://duansheli.github.io/2019/10/27/update-rule-by-scanner.html</link>
      <pubDate>Sun, 27 Oct 2019 17:28:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2019/10/27/update-rule-by-scanner.html</guid>
      <description>简述 drools的BRMS(业务规则管理系统)
起先叫 guvnor 然后叫 drools-workbench
从7.18版本开始叫 Business Central Workbench
Business-Central Workbench == Drools Workbench + jBPM Workbench
drools-workbench 用来管理规则</description>
    </item>
    
    <item>
      <title>自定义动态更新drools规则</title>
      <link>https://duansheli.github.io/2019/10/26/update-rule-by-scanner.html</link>
      <pubDate>Sat, 26 Oct 2019 17:28:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2019/10/26/update-rule-by-scanner.html</guid>
      <description>简述 scanner有两个实现 KieRepositoryScannerImpl KieFileSystemScannerImpl 二者区别为 一个是从文件夹检查更新， 一个是从maven仓库检查更新
下面以 KieFileSystemScannerImpl 为例进行演示从文件夹获取更新 然后分析过程 最后自定义一个 KieScanner
准备kjar工程 其实就是个maven项目 存放着规则文件
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;project xmlns=&amp;quot;http://maven.</description>
    </item>
    
    <item>
      <title>下载m3u8-aes128加密视频-02</title>
      <link>https://duansheli.github.io/2019/10/13/download-m3u8-video-02.html</link>
      <pubDate>Sun, 13 Oct 2019 22:28:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2019/10/13/download-m3u8-video-02.html</guid>
      <description>实例 流程为
1. 装个抓包工具 1. 浏览器配置代理为抓包工具
1. 在页面上点击播放后，会加载m3u8文件
1. 抓包工具检测到特定信息后，将该m3u8地址发送给spring boot应用
1. springboot根据收到的m3u8信息 下载视频 解密成mp4
抓包工具-mitmproxy mitmproxy 使用docker安装 docker主机ip 192.</description>
    </item>
    
    <item>
      <title>下载m3u8-aes128加密视频-01</title>
      <link>https://duansheli.github.io/2019/10/13/download-m3u8-video-01.html</link>
      <pubDate>Sat, 12 Oct 2019 17:28:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2019/10/13/download-m3u8-video-01.html</guid>
      <description>操作演示 如果是没加密的 一条命令就够了 ffmpeg -i http://aa.bb.com/play.m3u8 file.mp4 但被包含的资源一般m3u8的访问需要权限
同时m3u8中的ts也通过aes128加密 密码则也被包含起来
手动下载方式 video_m3u8_url=http://aa.bb.com/xx/001/play.m3u8  获取key 如果被加密了则 在 play.m3u8 中前几行可看到
#EXT-X-KEY:METHOD=AES-128,URI=&amp;quot;https://aa.bb.com/yy/001/key&amp;quot;,IV=0x5901307461D2D72A5EA7F1B2269C33DC  可得 ts_iv=5901307461D2D72A5EA7F1B2269C33DC &amp;amp;&amp;amp; ts_key_url=https://aa.</description>
    </item>
    
    <item>
      <title>scala调用系统命令</title>
      <link>https://duansheli.github.io/2019/10/09/scala-process.html</link>
      <pubDate>Wed, 09 Oct 2019 17:28:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2019/10/09/scala-process.html</guid>
      <description>操作演示 启动scala docker run --rm -it hseeberger/scala-sbt:11.0.3_1.2.8_2.13.0 bash scala -language:postfixOps  命令里面不能直接用管道或重定向符号
需要用#来拼接
报错解决 scala代码中如果使用 !执行命令时， 会有一段警告
scala&amp;gt; import scala.</description>
    </item>
    
    <item>
      <title>k8s的相关项目</title>
      <link>https://duansheli.github.io/2019/10/03/k8s-cluster-setup-03.html</link>
      <pubDate>Thu, 03 Oct 2019 17:28:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2019/10/03/k8s-cluster-setup-03.html</guid>
      <description>其他厂商版本 Canonical 公司为自家的 ubuntu 提供的 适配版 k8s 单机版 MicroK8s 集群版 Charmed Kubernetes
rancher公司 https://github.com/rancher/k3s/releases
工具 helm 包管理工具 就好比360软件管家、yum、apt等软件 可快速在k8s集群部署应用 https://github.</description>
    </item>
    
    <item>
      <title>浏览器启用dns-over-https(DoH)</title>
      <link>https://duansheli.github.io/2019/09/12/doh.html</link>
      <pubDate>Thu, 12 Sep 2019 13:13:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2019/09/12/doh.html</guid>
      <description>firefox chrome://flags Secure DNS lookups. 启用该选项 重启浏览器  chrome chrome://flags Secure DNS lookups. 启用该选项 重启浏览器  修改chrome快捷方式的参数 增加以下参数 --enable-features=&amp;quot;dns-over-https&amp;lt;DoHTrial&amp;quot; --force-fieldtrials=&amp;quot;DoHTrial/Group1&amp;quot; --force-fieldtrial-params=&amp;quot;DoHTrial.</description>
    </item>
    
    <item>
      <title>kotlin空指针校验</title>
      <link>https://duansheli.github.io/2019/09/11/kotlin-null-check.html</link>
      <pubDate>Wed, 11 Sep 2019 17:28:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2019/09/11/kotlin-null-check.html</guid>
      <description>kotlin空指针校验 类型的说明 变量声明方式 val a: String=&amp;quot;tom&amp;quot; 通常会写成val a = &amp;quot;tom&amp;quot; 但还有另一种 val a: String?=&amp;quot;tom&amp;quot; 表示非空类型
fun test1() { val a1 = 2; // val a2 = ss as String // 抛出转换失败的异常 val a2 = a1 as?</description>
    </item>
    
    <item>
      <title>使用hashids创建短链服务</title>
      <link>https://duansheli.github.io/2019/09/03/hashids-usage.html</link>
      <pubDate>Tue, 03 Sep 2019 17:28:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2019/09/03/hashids-usage.html</guid>
      <description>&lt;p&gt;简单的方案是使用uuid生成， 但太长且数据库检索效率低。&lt;br /&gt;
本次使用hashIds的方案 简单 安全。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>给文章加水印-零宽字符</title>
      <link>https://duansheli.github.io/2019/09/07/zero-width.html</link>
      <pubDate>Tue, 03 Sep 2019 17:28:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2019/09/07/zero-width.html</guid>
      <description>简述 一般的防盗图手段 给图片加水印 高级点则是隐形水印 阿里查到泄露内网截图的员工 美团和大众点评的盗图官司 最近了解到针对文本的水印技术：零宽字符  示例 加密的文本
tom‍‌‌‌​‍‌‍‍​‍‌‌‌‍​‍‌‌​‌‌‍​‌‍​‍‌​‌‌‌​‌‌‌‌​‌​‌‍‌‌​‌‌cat  解密后
by duansheli  项目源码 https://github.com/rover95/morse-encrypt 在线服务 http://morse.</description>
    </item>
    
    <item>
      <title>激活码的生成</title>
      <link>https://duansheli.github.io/2019/08/16/hashids-usage.html</link>
      <pubDate>Fri, 16 Aug 2019 17:28:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2019/08/16/hashids-usage.html</guid>
      <description>&lt;p&gt;简单的方案是使用uuid生成， 但太长且数据库检索效率低。&lt;br /&gt;
本次使用hashIds的方案 简单 安全。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>文件分割与合并</title>
      <link>https://duansheli.github.io/2019/08/07/split-merge-file.html</link>
      <pubDate>Wed, 07 Aug 2019 17:28:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2019/08/07/split-merge-file.html</guid>
      <description>简介 linux下的命令 dd、split 用于分割文件
cat命令用于合并文件
windows下使用 copy合并文件
linux下dd、split演示 测试文件 testfile 大小为 1004k 使用 split 命令将其 每600k切为一个文件
然后使用cat命令合并
使用 dd 命令将其 前700k复制为一个文件</description>
    </item>
    
    <item>
      <title>mysql物理备份与还原示例</title>
      <link>https://duansheli.github.io/2019/08/02/k8s-cluster-setup-02.html</link>
      <pubDate>Fri, 02 Aug 2019 17:28:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2019/08/02/k8s-cluster-setup-02.html</guid>
      <description>主要流程 1. 先建库建表 插入测试数据 2. 以物理方式备份数据 --数据备份完毕 3. 创建新的mysql-server 然后建库建表 移除表空间 4.停止mysql服务 将备份的数据还原 重新载入表空间 --数据还原完毕 ubuntu 中通过docker 运行mysql  测试过程 数据准备 两个sql脚本 一个是建表 一个是测试数据</description>
    </item>
    
    <item>
      <title>Github 最简单的认证方式 - Access Token[转]</title>
      <link>https://duansheli.github.io/2019/07/06/check-credit.html</link>
      <pubDate>Sat, 06 Jul 2019 16:13:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2019/07/06/check-credit.html</guid>
      <description>Github 最简单的认证方式 - Access Token[转] Github 本身提供了多种认证方式，所有开发人员可以各取所需。
 SSH，这是最原始的方式，如果使用git bash只要按照官方文档一步一步配置就好了
小心坑：SSH有可能需要配置代理，否则无法解析服务器域名。错误如下： ssh: Could not resolve hostname github.com: no address associated with name 解决办法：给SSH以及git 客户端配置代理。  HTTPS，这也是比较方便的方式，但是每一次都需要输入用户名和密码。</description>
    </item>
    
    <item>
      <title>github搜开源项目技巧</title>
      <link>https://duansheli.github.io/2019/07/06/check-credit.html</link>
      <pubDate>Sat, 06 Jul 2019 16:13:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2019/07/06/check-credit.html</guid>
      <description>主要使用高级搜索来实现精准搜索开源项目
一个仓库主要以下几部分 项目名称，项目描述 项目主要是什么语言的 根目录下的README.md 描述一些详情
常用示例 #名字包含spring spring in:name #描述中包含流量控制的 flow control in:description #文件readme.md包含xx spring in:readme #语言当然选你会的 language:java #作者是国内的 location:China #点赞数大说明大家比较认可 stars:&amp;gt;=800 #点赞数在10到50之间的 stars:10.</description>
    </item>
    
    <item>
      <title>k8s-外部访问ingress</title>
      <link>https://duansheli.github.io/2019/06/27/k8s-ingress-controller.html</link>
      <pubDate>Thu, 27 Jun 2019 17:28:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2019/06/27/k8s-ingress-controller.html</guid>
      <description>对外暴露服务 通常使用ingress作为前置入口 那如何配置 ingress-controller 与外界通信？
LoadBalancer 如果有云厂商的LoadBalancer， 那自然方便
各云厂商的实现可能有所不同
但使用后效果 应该都是高可用的vip入口
其他方案 如果是自建的k8s集群
或者云厂商没有LoadBalancer
又或者不想用云厂商的LoadBalancer
那这个时候整，之间nodePort么
自建-LoadBalance 基于开源项目自建 LoadBalance</description>
    </item>
    
    <item>
      <title>gradle-task使用</title>
      <link>https://duansheli.github.io/2019/06/21/gradle-task-learn.html</link>
      <pubDate>Fri, 21 Jun 2019 16:13:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2019/06/21/gradle-task-learn.html</guid>
      <description>gradle-task的使用 新建一个gradle-Java项目
工程创建 默认的 build.gradle 文件
plugins { id &#39;java&#39; } group &#39;fluffy.mo&#39; version &#39;1.0-SNAPSHOT&#39; sourceCompatibility = 1.8 repositories { mavenCentral() } dependencies { testCompile group: &#39;junit&#39;, name: &#39;junit&#39;, version: &#39;4.</description>
    </item>
    
    <item>
      <title>使用jstack分析线程-示例</title>
      <link>https://duansheli.github.io/2019/02/10/jstack-demo.html</link>
      <pubDate>Mon, 10 Jun 2019 17:28:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2019/02/10/jstack-demo.html</guid>
      <description>1. 使用jstack分析线程-示例 通过两个demo来学习如何使用jstack
1.1. 死锁 1.1.1. 死锁示例代码 import java.util.concurrent.TimeUnit; import java.util.concurrent.locks.LockSupport; import java.util.concurrent.locks.ReentrantLock; class DeadLockDemo { public static void main(String[] args) throws Exception { dead1(); dead2(); System.</description>
    </item>
    
    <item>
      <title>查查查-各类信用查询</title>
      <link>https://duansheli.github.io/2019/06/05/check-credit.html</link>
      <pubDate>Wed, 05 Jun 2019 16:13:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2019/06/05/check-credit.html</guid>
      <description>中国执行信息公开网
可以查到一个人的失信记录
http://zxgk.court.gov.cn
 全国标准信息公共服务平台
每个行业接触到的各种标准，包括行业标准、团体标准、国外标准，已废止的、现行的、即将实施的都能查到。
http://www.std.gov.cn
 征信中心（银行一般规定：一个月不要查询超过三次） 用来查询自己的个人信用记录，违约、延迟还款和查询是否存在不良记录。
https://ipcrs.pbccrc.org.cn/
 中国法律法规资讯网 http://www.86148.com/
 全国企业信用信息公示系统 全国企业信用信息公示系统
毕业学生找工作不知道公司靠不靠谱，可以上这里查询是不是正规公司。
http://gsxt.saic.gov.cn/</description>
    </item>
    
    <item>
      <title>docker的复制文件操作</title>
      <link>https://duansheli.github.io/2019/09/09/docker-cp.html</link>
      <pubDate>Sun, 02 Jun 2019 17:28:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2019/09/09/docker-cp.html</guid>
      <description>&lt;p&gt;容器与宿主机之间的文件复制示例&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>休闲娱乐</title>
      <link>https://duansheli.github.io/2019/06/05/relax.html</link>
      <pubDate>Thu, 30 May 2019 13:13:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2019/06/05/relax.html</guid>
      <description>小河淌水-颅内高潮 https://weibo.com/tv/v/Hl5d8en8D?fid=1034:4350248915771690 https://dig.chouti.com/link/25184166 小河淌水-龚琳娜-歌手第三季-第10期：第76分钟开始 https://www.mgtv.com/b/327378/5314401.html https://www.mgtv.com/b/327378/5314351.html https://y.qq.com/n/yqq/song/002ogMAd2lR6sT.html 小河淌水-龚琳娜-全能星战-第二期第80分钟开始 https://www.iqiyi.com/v_19rrh8hi14.html https://y.qq.com/n/yqq/song/004ezdyr3O6GTp.html  图片-解压 https://www.flickr.com/explore
点开图片，单张图片全屏观看，切换图片用键盘左右键。</description>
    </item>
    
    <item>
      <title>各类openjdk下载地址</title>
      <link>https://duansheli.github.io/2019/05/25/download-openjdk.html</link>
      <pubDate>Sat, 25 May 2019 17:28:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2019/05/25/download-openjdk.html</guid>
      <description>openjdk oracle原版 jdk 之前在可通过命令从官网下载，现在行不通了，必须用oracle账号登录才能下载。 https://www.oracle.com/technetwork/java/javase/downloads/jdk11-downloads-5066655.html oracle的共享账号 http://bugmenot.com/view/oracle.com adobe网站下载jdk不需要登录 https://www.adobe.com/support/coldfusion/downloads.html 过期渠道 https://github.com/frekele/oracle-java/releases https://github.com/ZachCheung/oracle-java-downloads 有一种 oracle版的openjdk http://jdk.java.net/archive/ oracle还有一个跨语言的通用虚拟机 GraalVM https://github.com/oracle/graal/releases 从java 8开始 oracle开始收费，虽然对个人免费， 但对企业是收费的，虽然不知道怎么收，但收费肯定是不菲的。 如果生产环境不用oracle的jdk，最好平时开发就别用oracle，改用openjdk  亚马逊jdk https://amazonaws-china.</description>
    </item>
    
    <item>
      <title>DinD模式下通过容器构建镜像-方案</title>
      <link>https://duansheli.github.io/2019/05/18/dind-build-image-with-cache.html</link>
      <pubDate>Sat, 18 May 2019 17:28:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2019/05/18/dind-build-image-with-cache.html</guid>
      <description>&lt;p&gt;持续集成时，构建镜像后，通常会产生一些临时镜像&lt;br /&gt;
很不docker，一点也不绿色&lt;br /&gt;
使用DinD的方案可以解决该问题&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>自动装箱拆箱在scala中的表现</title>
      <link>https://duansheli.github.io/2019/05/17/thinking-autoboxing-implicit.html</link>
      <pubDate>Fri, 17 May 2019 17:28:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2019/05/17/thinking-autoboxing-implicit.html</guid>
      <description>&lt;p&gt;自动装箱拆箱是java中的概念&lt;br /&gt;
implicit是scala中的概念&lt;br /&gt;
都有变量包装的特性&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>spring data elasticsearch日期类型冲突</title>
      <link>https://duansheli.github.io/2019/05/10/spring-data-elasticsearch-error-date.html</link>
      <pubDate>Fri, 10 May 2019 17:28:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2019/05/10/spring-data-elasticsearch-error-date.html</guid>
      <description>IllegalArgumentException 环境 spring-data-elasticsearch 3.1.6
java.lang.IllegalArgumentException: Mapper for [publishDate] conflicts with existing mapping in other types: [mapper [publishDate] has different [format] values</description>
    </item>
    
    <item>
      <title>使用spring security实现手机验证码登录</title>
      <link>https://duansheli.github.io/2019/04/09/spring-security-login-by-mobile-code.html</link>
      <pubDate>Tue, 09 Apr 2019 17:28:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2019/04/09/spring-security-login-by-mobile-code.html</guid>
      <description>目标 使用spring security添加两种登录方式 * 手机号，验证码登录 * 用户名 密码 图形验证码登录
运行环境  win10-x64 jdk-v1.8 springboot-v2.1.4 springsecurity-5.1.5  环境搭建 新建maven项目 配置pom.xml依赖项</description>
    </item>
    
    <item>
      <title>登录流程的本质</title>
      <link>https://duansheli.github.io/2019/04/08/login-nature.html</link>
      <pubDate>Mon, 08 Apr 2019 17:28:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2019/04/08/login-nature.html</guid>
      <description>登录的本质  在登录页面 输入用户名与密码 后台核对无误后，将用户信息放入会话中 在访问需要登录的页面时，系统在会话中查找用户信息 找到了，就放行 没找到，将页面重定向到登录页面  Java代码如何实现 登录 针对 /login 请求 接收页面的表单信息，即用户名与密码
核对无误， 则将用户信息放入会话
request.getSession().setAttribute(&amp;ldquo;currentUser&amp;rdquo;,&amp;ldquo;tom&amp;rdquo;);
登录成功</description>
    </item>
    
    <item>
      <title>通过zipkin对dubbo进行链路追踪</title>
      <link>https://duansheli.github.io/2019/04/06/zipkin-dubbo-tracing.html</link>
      <pubDate>Sat, 06 Apr 2019 17:28:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2019/04/06/zipkin-dubbo-tracing.html</guid>
      <description>&lt;p&gt;通过zipkin实现dubbo下的链路追踪&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>dev-redis客户端-RedisDesktopManager</title>
      <link>https://duansheli.github.io/2019/03/28/download-RedisDesktopManager.html</link>
      <pubDate>Thu, 28 Mar 2019 13:13:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2019/03/28/download-RedisDesktopManager.html</guid>
      <description>下载 RedisDesktopManager 收费了 不提供下载地址
但提供了源码 可以自己编译
有网友提供了编译好的版本，
官方源码 https://github.com/uglide/RedisDesktopManager 编译好的版本 https://github.com/lework/RedisDesktopManager-Windows/releases 编译教程 https://github.com/lloy1231/RedisDesktopManager-Windows http://docs.redisdesktop.com/en/latest/install/#build-from-source  由nodejs写的redis客户端 https://github.com/qishibo/AnotherRedisDesktopManager/releases</description>
    </item>
    
    <item>
      <title>linux内存文件系统使用</title>
      <link>https://duansheli.github.io/2019/03/17/linux-ram-filesystem.html</link>
      <pubDate>Sun, 17 Mar 2019 17:28:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2019/03/17/linux-ram-filesystem.html</guid>
      <description>使用内存文件系统 就是图它特别快
操作演示 3种创建内存文件系统的方式 tmpfs 使用操作比较友好 ramfs 比较快，但危险 格式化内存 步骤稍微繁琐
创建几个文件夹用来演示挂载
mkdir /mnt/m01 /mnt/m02 /mnt/m03  方案1-格式化内存 linux系统 目前有16个ram块</description>
    </item>
    
    <item>
      <title>redis-lua-秒杀</title>
      <link>https://duansheli.github.io/2019/03/16/redis-lua-buy.html</link>
      <pubDate>Sat, 16 Mar 2019 17:28:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2019/03/16/redis-lua-buy.html</guid>
      <description>简介 做秒杀的商品数量一般计较少
该方案使用set存储 一定库存
每个用户抢购时，从redis申请序号， 取到了则创建订单。
可与前端缓存方案 限流 熔断一起使用
测试
cat &amp;gt; test.lua &amp;lt;&amp;lt;EOF local t1 = redis.call(&#39;scard&#39;, &amp;quot;aaa&amp;quot;) local t2 = tonumber(t1) local t3 = redis.</description>
    </item>
    
    <item>
      <title>spring-session实现分布式会话</title>
      <link>https://duansheli.github.io/2019/03/02/spring-session-in-action.html</link>
      <pubDate>Sat, 02 Mar 2019 17:28:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2019/03/02/spring-session-in-action.html</guid>
      <description>&lt;p&gt;通过spring session实现分布式会话&lt;br /&gt;
集群下不会丢失会话 集中管理session&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>cloudflare设置ddns</title>
      <link>https://duansheli.github.io/2019/08/22/cloudflare-ddns.html</link>
      <pubDate>Fri, 22 Feb 2019 13:13:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2019/08/22/cloudflare-ddns.html</guid>
      <description>主要流程 最终目的是 让 movie.aaabbb.com 能解析成家中的公网ip
最终的api为
curl -X PUT &amp;quot;https://api.cloudflare.com/client/v4/zones/$tzone_id/dns_records/$trecord_id&amp;quot; \ -H &amp;quot;X-Auth-Email: $auth_email&amp;quot; \ -H &amp;quot;X-Auth-Key: $auth_key&amp;quot; \ -H &amp;quot;Content-Type: application/json&amp;quot; \ --data &#39;{&amp;quot;type&amp;quot;:&amp;quot;A&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;file.</description>
    </item>
    
    <item>
      <title>通过rocketmq实现分布式事务</title>
      <link>https://duansheli.github.io/2019/02/16/rocketmq-transaction.html</link>
      <pubDate>Sat, 16 Feb 2019 17:28:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2019/02/16/rocketmq-transaction.html</guid>
      <description>1. 通过rocketmq实现分布式事务 1.1. 实现原理 1.1.1. 通常说的分布式事务 一次请求-调用serviceA
serviceA 中会调用serviceB，serviceC，serviceD
在serviceA ，serviceB，serviceC，serviceD中的事务要么一起成功
只要有一个节点事务失败了， 其他的节点都会将事务回滚
1.1.2. rocketmq的分布式事务 rocketmq的分布式事务与【通常说的分布式事务】有所不同
它会做最大努力（重试）让所有节点一起成功， 不保证一定成功
对于不成功的情况 应设置人工兜底补偿</description>
    </item>
    
    <item>
      <title>drone持续集成-发布github pages</title>
      <link>https://duansheli.github.io/2019/02/03/drone-ci-github-pages.html</link>
      <pubDate>Sun, 03 Feb 2019 17:28:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2019/02/03/drone-ci-github-pages.html</guid>
      <description>&lt;p&gt;docker持续集成-drone发布静态博客&lt;br /&gt;
将hugo产生的静态页面推送到github&lt;br /&gt;
并通知到钉钉群&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>跨宿主机与docker容器通信</title>
      <link>https://duansheli.github.io/2019/01/01/connect-container-ip.html</link>
      <pubDate>Fri, 01 Feb 2019 17:28:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2019/01/01/connect-container-ip.html</guid>
      <description>&lt;p&gt;有一些应用只需要1个端口就能访问&lt;br /&gt;
比如 nginx&lt;/p&gt;

&lt;p&gt;而有一些应用的搭建都是由多个节点搭建的&lt;br /&gt;
比如hadoop 当访问hdfs的时候 访问的不仅仅用port还会用ip&lt;br /&gt;
这时后端口映射就不那么好使了&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>gradle-全局init</title>
      <link>https://duansheli.github.io/2019/01/16/gradle-init-learn.html</link>
      <pubDate>Wed, 16 Jan 2019 16:13:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2019/01/16/gradle-init-learn.html</guid>
      <description>官方文档 https://docs.gradle.org/5.1.1/userguide/init_scripts.html
全局脚本位置 通过参数指定脚本 &amp;ndash;init-script 或 -I （大写的i） 如 gradle -I init.gradle package
存放在 USER_HOME/.gradle/ 目录下
文件名为 init.gradle 或者 init.</description>
    </item>
    
    <item>
      <title>docker常用操作</title>
      <link>https://duansheli.github.io/2019/01/15/docker-useful-cmd.html</link>
      <pubDate>Tue, 15 Jan 2019 17:28:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2019/01/15/docker-useful-cmd.html</guid>
      <description>docker常用操作 Dockerfile编写 编写一般不会一次就完成，常常会出错
Sending build context to Docker daemon 5.902MB Step 1/10 : FROM docker:git as builder ---&amp;gt; 9be5c3cd302c Step 2/10 : RUN git clone https://github.</description>
    </item>
    
    <item>
      <title>压缩包解压时不使用临时目录</title>
      <link>https://duansheli.github.io/2018/01/06/unzip-no-copy.html</link>
      <pubDate>Sun, 06 Jan 2019 13:13:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2018/01/06/unzip-no-copy.html</guid>
      <description>平时主要用 firefox 和 chrome
举例描述 比如下载了一个压缩包 apache-tomcat-7.0.96-windows-x86.zip
文件放在C盘的download文件夹下
通常的操作是 双击打开压缩包 文件浏览器打开希望解压的位置 比如 d://myprogram 此时再从压缩包中拖动要解压的文件到 d://myprogram 文件夹中
在解压的过程中 d://myprogram 中不会有文件夹 apache-tomcat-7.</description>
    </item>
    
    <item>
      <title>k8s搭建集群3-异常解决</title>
      <link>https://duansheli.github.io/2019/01/03/k8s-cluster-setup-03.html</link>
      <pubDate>Thu, 03 Jan 2019 17:28:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2019/01/03/k8s-cluster-setup-03.html</guid>
      <description>出错恢复 没遇到报错可以跳过
安装过程中可能有一些异常
查看所有的pod分布情况 kubectl get pods -n kube-system -o wide -l k8s-app=kubernetes-dashboard  查看失败的镜像
imageName=`kubectl describe -n kube-system pod -l k8s-app=kubernetes-dashboard | grep Image: | awk &#39;{print $2 }&#39; ` kubectl describe -n kube-system pod -l k8s-app=kubernetes-dashboard  某个pod的详情 kubectl describe pod -l k8s-app=kubernetes-dashboard -n kube-system  出错日志 kubectl logs `kubectl get pods -n kube-system -l k8s-app=kubernetes-dashboard -o name` -n kube-system  报错描述提到 addr cni0 failed to set bridge addr: &amp;ldquo;cni0&amp;rdquo; already has an IP address different from 10.</description>
    </item>
    
    <item>
      <title>k8s集群搭建-02</title>
      <link>https://duansheli.github.io/2019/01/02/k8s-cluster-setup-02.html</link>
      <pubDate>Wed, 02 Jan 2019 17:28:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2019/01/02/k8s-cluster-setup-02.html</guid>
      <description>&lt;p&gt;k8s集群好了 再添加一些相关的组件&lt;br /&gt;
dashboard helm helm的webui&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>k8s集群搭建-01</title>
      <link>https://duansheli.github.io/2019/01/01/k8s-cluster-setup-01.html</link>
      <pubDate>Tue, 01 Jan 2019 17:28:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2019/01/01/k8s-cluster-setup-01.html</guid>
      <description>1. 目标 通过虚拟机搭建一个kubernetes集群
共3个节点基于ubuntu
2. 组件安装规划  宿主机: win10 vmware-v15
ubuntu=v16.04.1
docker=v18.06
k8s=v1.12.6
3个虚拟机节点=master,node1,node2
系统镜像下载
 3. 安装系统环境  因为每个节点都需要安装docker kubeadm&amp;hellip;等软件 以及各种配置</description>
    </item>
    
    <item>
      <title>ipv4下的回环地址在ipv6下的表示</title>
      <link>https://duansheli.github.io/2018/10/16/ipv6-ip.html</link>
      <pubDate>Tue, 16 Oct 2018 13:13:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2018/10/16/ipv6-ip.html</guid>
      <description> 回环地址 ipv4 127.0.0.1 ipv6 0:0:0:0:0:0:0:1 ipv6下简写 ::1  所有地址 ipv4 0.0.0.0 ipv6 0:0:0:0:0:0:0:0 ipv6下简写 ::  </description>
    </item>
    
    <item>
      <title>scala并发编程-scala的future与java的互相转换</title>
      <link>https://duansheli.github.io/2018/10/15/future-convert-to-scala.html</link>
      <pubDate>Mon, 15 Oct 2018 17:28:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2018/10/15/future-convert-to-scala.html</guid>
      <description>操作演示 简单上手 转换需要额外的包
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.scala-lang.modules&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;scala-java8-compat_2.12&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;0.8.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;  主要是 FutureConverters 的 .toScala() .toJava() 两个方法
import java.time.{Duration =&amp;gt; jduration} val request = HttpRequest.</description>
    </item>
    
    <item>
      <title>scala并发编程-async</title>
      <link>https://duansheli.github.io/2018/09/21/scala-concurrent-async.html</link>
      <pubDate>Fri, 21 Sep 2018 17:28:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2018/09/21/scala-concurrent-async.html</guid>
      <description>描述 async是另一个jar包里的， 用来更简洁的处理 多个future之间的任务衔接
原理是以宏的方式编译代码 可以说是个二道贩子
相似的东西: java库的lombok
由于是二次编译，如果需要调试的话，可能会有问题，慎用。
简单上手 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.scala-lang.modules&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;scala-async_2.12&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;0.9.7&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;  示例1 val f1 = async { val ff1 = async { println(11); true } val ff2 = async { println(22); 322 } if (await(ff1)) await(ff2) else 0 }  示例2 def slowCalcFuture: Future[Int] = Future { TimeUnit.</description>
    </item>
    
    <item>
      <title>scala并发编程-blocking</title>
      <link>https://duansheli.github.io/2018/08/22/scala-concurrent-blocking.html</link>
      <pubDate>Wed, 22 Aug 2018 17:28:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2018/08/22/scala-concurrent-blocking.html</guid>
      <description>blocking描述 blocking 中的代码块 与future不在同一线程中，是阻塞等待。 但是阻塞的方式调用在遇上线程池的线程不足时， 会创建新的线程
测试效果 package com.fluffy.test_concurrent import java.util.concurrent.{CountDownLatch, TimeUnit} object Demo_blocking extends App { import scala.concurrent.{Future, blocking} import scala.</description>
    </item>
    
    <item>
      <title>scala并发编程-promise</title>
      <link>https://duansheli.github.io/2018/08/18/scala-concurrent-promise.html</link>
      <pubDate>Sat, 18 Aug 2018 17:28:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2018/08/18/scala-concurrent-promise.html</guid>
      <description>操作演示 生产者消费者模型
一个Promise 只有一个future
Promise只能给future确认一次结果
简单上手 import scala.concurrent.ExecutionContext.Implicits.global val countDownLatch = new CountDownLatch(1) val p = Promise[Int]() val f1 = p.</description>
    </item>
    
    <item>
      <title>scala并发编程-Duration</title>
      <link>https://duansheli.github.io/2018/08/13/scala-concurrent-Duration.html</link>
      <pubDate>Mon, 13 Aug 2018 17:28:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2018/08/13/scala-concurrent-Duration.html</guid>
      <description>操作步骤 Duration的几种创建方式
可以进行 加减乘除 的操作
java版Duration 与 Scala版Duration 互相转换
简单上手 import scala.concurrent.duration._ import scala.concurrent.ExecutionContext.Implicits.global // FiniteDuration对象的创建 // 截至期限的创建 def main(args_q: Array[String]) { val d1: FiniteDuration = 1.</description>
    </item>
    
    <item>
      <title>scala并发编程-future的map和flatmap</title>
      <link>https://duansheli.github.io/2018/08/12/scala-concurrent-map.html</link>
      <pubDate>Sun, 12 Aug 2018 17:28:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2018/08/12/scala-concurrent-map.html</guid>
      <description>操作演示 推演 在不使用 map flatmap的情况下 多个future 如果相互之间有依赖关系 则通常是嵌套调用 嵌套太多则维护性太差
比如
val f1 = Future { TimeUnit.SECONDS.sleep(1) &amp;quot;f1&amp;quot; } f1 onSuccess { case str =&amp;gt; val f11 = Future { // 启动另一个future // Future{ 。。。 } // 再启动另一个future if (3 &amp;gt; 2) println(str) else throw new Exception(&amp;quot;出错了&amp;quot;) } f11 onSuccess { case _ =&amp;gt; println(s&amp;quot;收到结果 ${str}&amp;quot;) } }  map flatmap 示例 import scala.</description>
    </item>
    
    <item>
      <title>scala并发编程-future</title>
      <link>https://duansheli.github.io/2018/08/11/scala-concurrent-future.html</link>
      <pubDate>Sat, 11 Aug 2018 17:28:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2018/08/11/scala-concurrent-future.html</guid>
      <description>操作演示 简单上手 scala版Future 和java版是一个意思 将任务放在线程池中去执行
import java.time.LocalTime import java.util.concurrent.TimeUnit import scala.concurrent.duration.Duration import scala.concurrent.{Await, Future} import scala.util.{Failure, Success} // @formatter:off object Demo01_future extends App{ import scala.</description>
    </item>
    
    <item>
      <title>redis使用lua脚本</title>
      <link>https://duansheli.github.io/2018/08/11/redis-lua.html</link>
      <pubDate>Sat, 11 Aug 2018 13:13:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2018/08/11/redis-lua.html</guid>
      <description>脚本   hello lua cat &amp;gt; test01.lua &amp;lt;&amp;lt;EOF local msg = &amp;quot;Hello, lua&amp;quot; return msg EOF redis-cli EVAL &amp;quot;$(cat test01.</description>
    </item>
    
    <item>
      <title>JVM的垃圾回收</title>
      <link>https://duansheli.github.io/2018/07/14/jvm-memory-gc.html</link>
      <pubDate>Sat, 14 Jul 2018 15:13:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2018/07/14/jvm-memory-gc.html</guid>
      <description>JVM内存结构 JVM是java代码的运行环境， 用来加载 .class和jar文件 , 运行代码。
内存区域 +------------------------------------------------------+ | | | +-------------+ +---------------+ | | | xxxA.class | | | | | | xxxB.</description>
    </item>
    
    <item>
      <title>类加载器加载的类不能创建对象</title>
      <link>https://duansheli.github.io/2018/07/08/classloader-modifiers-exception.html</link>
      <pubDate>Sun, 08 Jul 2018 15:13:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2018/07/08/classloader-modifiers-exception.html</guid>
      <description>IllegalAccessException 异常信息 Exception in thread &amp;quot;main&amp;quot; java.lang.IllegalAccessException: Class fluffy.mo.MyClassloader can not access a member of class fluffy.mo.Car with modifiers &amp;quot;public&amp;quot; at sun.</description>
    </item>
    
    <item>
      <title>SPI与contextclassloader</title>
      <link>https://duansheli.github.io/2018/06/27/classloader-spi.html</link>
      <pubDate>Wed, 27 Jun 2018 14:13:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2018/06/27/classloader-spi.html</guid>
      <description>目标 通过SPI学习setContextClassLoader，getContextClassLoader的用法
SPI概念 SPI（Service Provider Interface）是JDK内置的一种提供服务发现的机制。 也可以看成是一种服务注册或者ioc
自定义SPI方式
 定义一个接口 fluffy.mo.CarPlugin 定义两个实现类 fluffy.mo.RedCar、 fluffy.mo.BlueCar 配置文件 【META-INF/services/文件名=接口全名】 &amp;gt; META-INF/services/fluffy.mo.CarPlugin &amp;gt;  &amp;gt; fluffy.</description>
    </item>
    
    <item>
      <title>类加载器使用</title>
      <link>https://duansheli.github.io/2018/06/21/classloader-start.html</link>
      <pubDate>Thu, 21 Jun 2018 13:13:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2018/06/21/classloader-start.html</guid>
      <description>类加载器 引入 一般开发都不会接触classloader的概念，但程序的运行却是建立在classloader之上的 为什么要有类加载器： java程序的启动首先就需要jvm去加载class 而代码中的对象创建类调用【new Person(); Autil.currentTime();】 都需要class被jvm加载 使用类的静态方法，或者创建对象前，需要先加载class 而每个class必然由一个classloader加载  方向 貌似类加载的事情不需要我们操心，虚拟机已经帮我们解决了 那学这个能干嘛： * 更了解虚拟机; * 在复杂的生产环境可能遇到class找不到异常,了解这个有助于排查错误; * 自研服务/插件，动态加载代码; * tomcat的项目代码热部署，jsp热部署; * 各种热部署插件; * 软件破解;  划重点 一个class在内存中只存一份，以及限定条件 defineClass决定class的类加载器是谁 线程上下文类加载器用于隐式传参 一个对象的类由哪个类加载器去加载，取决于显示使用类或显示使用类加载器</description>
    </item>
    
    <item>
      <title>动态代理-rpc示例-01</title>
      <link>https://duansheli.github.io/2018/06/05/proxy-rpc-01.html</link>
      <pubDate>Tue, 05 Jun 2018 13:13:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2018/06/05/proxy-rpc-01.html</guid>
      <description>目标 写个简单的rpc 调用
Rpc大致思路 定义一个接口HelloService 放在iface.jar中 应用P中引用iface.jar 实现接口HelloService进行处理任务 注册bean到spring中 应用C中, 通过spring获取HelloService的实例phService 调用phService.echo(xxx)方法，获得返回结果 应用P运行在1个jvm中 应用C运行在另1个jvm中 phService实质为一个代理对象 该代理对象通过把调用的参数封装，序列化后，通过网络传输给应用P 应用P根据收到参数后，调用处理接口相应的实现类，并将结果回传给应用C端 最终代理对象返回收到的运行结果  序列化-知识点补充 进行RPC调用必然要涉及对方法参数的序列化。 序列化框架有很多， 如protobuf、thrift、hession等 dubbo的rpc是支持多种序列化方式，如Java原生、Kryo、webservice等 spring cloud的http调用也算一种序列化方式 有了序列化工具，不仅仅是跨JVM的方法调用，还能跨语言调用。 本次示例使用java原生序列化  初版代码 所用到包 import java.</description>
    </item>
    
    <item>
      <title>动态代理-rpc示例-02</title>
      <link>https://duansheli.github.io/2018/06/05/proxy-rpc-02.html</link>
      <pubDate>Tue, 05 Jun 2018 13:13:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2018/06/05/proxy-rpc-02.html</guid>
      <description>上个版本的代码看着比较生肉，与平时开发时的写法差别较大。 接下来这版，加入了动态代理后
动态代理-guava版 import com.google.common.reflect.Reflection; class DemoGuava { interface MyMath1 { public Integer sum(Integer a, Integer b); } static class MyMathImpl implements MyMath1 { @Override public Integer sum(Integer a, Integer b) { return a + b; } } public static void main(String[] args) { MyMath1 tg = new MyMathImpl(); // 创建对象代理 MyMath1 math = (MyMath1) Reflection.</description>
    </item>
    
    <item>
      <title>动态代理</title>
      <link>https://duansheli.github.io/2018/06/02/proxy-start.html</link>
      <pubDate>Sat, 02 Jun 2018 13:13:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2018/06/02/proxy-start.html</guid>
      <description>目标 通过代码示例了解动态代理语法
示例代码 import java.lang.reflect.InvocationHandler; import java.lang.reflect.Method; import java.lang.reflect.Proxy; public class Demo { interface MyMath1 { public Integer sum(Integer a, Integer b); } static class MyMathImpl implements MyMath1 { @Override public Integer sum(Integer a, Integer b) { return a + b; } } public static void main(String[] args) { MyMath1 tg = new MyMathImpl(); // 创建对象代理 MyMath1 math = (MyMath1) Proxy.</description>
    </item>
    
    <item>
      <title>反射使用</title>
      <link>https://duansheli.github.io/2018/04/02/reflect-start.html</link>
      <pubDate>Mon, 02 Apr 2018 13:13:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2018/04/02/reflect-start.html</guid>
      <description>反射介绍 可以不直接new 对象，或调用方法。 用另一种创建某个对象（字符串的方式），或调用某个对象的方法（字符串的方式）。 反射这种间接调用效率肯定是不如直接调用的。
程序不知道具体要创建接口的哪个实现类， 在启动时，通过读取配置文件才知道要创建那个实现类。
先学习语法，然后可以通过结合动态代理加深理解。
反射的场景 一般的开发很少直接用到，不过在各类框架中基本离不开。
另外如果要自研框架，或者对框架定制功能，通常也会用到。
 spring以xml配置去注册bean 动态代理以及其衍生的各类服务  远程调用 日志，监控 缓存 权限 spring-事务注解  使用注解的实现的各种功能 软件破解。。。等等  语法示例 普通的bean package com.</description>
    </item>
    
    <item>
      <title>dev-浏览器</title>
      <link>https://duansheli.github.io/2018/03/17/dev-browser.html</link>
      <pubDate>Sat, 17 Mar 2018 13:13:13 +0800</pubDate>
      
      <guid>https://duansheli.github.io/2018/03/17/dev-browser.html</guid>
      <description>平时主要用 firefox 和 chrome
firefox 首选 http://download-origin.cdn.mozilla.net/pub/devedition/releases/
选则版本-32或64位-语言 比如 http://download-origin.cdn.mozilla.net/pub/devedition/releases/58.0b1/win64/zh-CN/ 下载Firefox Setup 58.0b1.exe后， 修改后缀为zip后解压core文件夹  更多
http://download-origin.cdn.mozilla.net/pub/devedition/releases/ http://download-installer.cdn.mozilla.net/pub/firefox/releases/ http://ftp.mozilla.org/pub/firefox/nightly/latest-mozilla-central-l10n/ http://ftp.</description>
    </item>
    
  </channel>
</rss>